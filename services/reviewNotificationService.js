const { db } = require('../firebase/config');
const emailService = require('./emailService');
const { 
  generateReviewNotificationEmail, 
  generateReviewResponseEmail, 
  generateReviewUpdateEmail 
} = require('../emails/reviewTemplates');

/**
 * Envoie une notification par email lors de la cr√©ation d'un nouvel avis
 * @param {Object} reviewData - Les donn√©es de l'avis
 * @param {string} userId - L'ID de l'utilisateur
 */
async function sendNewReviewNotification(reviewData, userId) {
  try {
    console.log("üìß Envoi de notification pour un nouvel avis");
    
    // V√©rifier que l'avis existe
    if (!reviewData || !userId) {
      console.error("‚ùå Donn√©es manquantes: avis ou ID utilisateur");
      return { success: false, error: "Donn√©es d'avis ou ID utilisateur manquants" };
    }
    
    // R√©cup√©rer les donn√©es de l'utilisateur
    const userDoc = await db.collection("users").doc(userId).get();
    if (!userDoc.exists) {
      console.error(`‚ùå Utilisateur ${userId} non trouv√©`);
      return { success: false, error: "Utilisateur non trouv√©" };
    }
    
    const userData = userDoc.data();
    
    // Variables pour les informations de produit ou cat√©gorie si n√©cessaire
    let productData = null;
    
    // Si c'est un avis sur un produit, r√©cup√©rer les infos du produit
    if (reviewData.reviewType === 'product' && reviewData.productId) {
      const productDoc = await db.collection("products").doc(reviewData.productId).get();
      if (productDoc.exists) {
        productData = productDoc.data();
      }
    }
    
    // G√©n√©rer le contenu de l'email
    const emailContent = generateReviewNotificationEmail(reviewData, userData, productData);
    
    // Envoyer l'email √† l'administrateur
    const adminResult = await emailService.sendEmail(
      process.env.EMAIL_USER, // Adresse admin
      emailContent.subject,
      emailContent.html
    );
    
    if (!adminResult.success) {
      console.error("‚ùå Erreur lors de l'envoi de l'email √† l'administrateur:", adminResult.error);
    }
    
    try {
      // Mettre √† jour l'avis pour indiquer que la notification a √©t√© envoy√©e
      await db.collection("reviews").doc(reviewData.id).update({
        notificationSent: true,
        notificationSentDate: new Date()
      });
    } catch (updateError) {
      console.error("‚ùå Erreur lors de la mise √† jour de l'avis:", updateError);
      // On continue m√™me si l'update √©choue
    }
    
    console.log("‚úÖ Notifications de nouvel avis envoy√©es");
    return { success: true };
  } catch (error) {
    console.error("‚ùå Erreur lors de l'envoi des notifications d'avis:", error);
    return { success: false, error: error.message };
  }
}

/**
 * Envoie une notification par email lorsqu'un administrateur r√©pond √† un avis
 * @param {Object} reviewData - Les donn√©es de l'avis
 * @param {Object} responseData - Les donn√©es de la r√©ponse
 */
async function sendReviewResponseNotification(reviewData, responseData) {
  try {
    console.log("üìß Envoi de notification de r√©ponse √† un avis");
    
    // V√©rifier que l'avis et la r√©ponse existent
    if (!reviewData || !responseData) {
      console.error("‚ùå Donn√©es manquantes: avis ou r√©ponse");
      return { success: false, error: "Donn√©es d'avis ou de r√©ponse manquantes" };
    }
    
    // R√©cup√©rer les donn√©es de l'utilisateur
    const userDoc = await db.collection("users").doc(reviewData.userId).get();
    if (!userDoc.exists) {
      console.error(`‚ùå Utilisateur ${reviewData.userId} non trouv√©`);
      return { success: false, error: "Utilisateur non trouv√©" };
    }
    
    const userData = userDoc.data();
    
    // G√©n√©rer le contenu de l'email
    const emailContent = generateReviewResponseEmail(reviewData, responseData, userData);
    
    // Envoyer l'email √† l'utilisateur
    const userResult = await emailService.sendEmail(
      userData.email,
      emailContent.subject,
      emailContent.html
    );
    
    if (!userResult.success) {
      console.error("‚ùå Erreur lors de l'envoi de l'email √† l'utilisateur:", userResult.error);
      return { success: false, error: userResult.error };
    }
    
    try {
      // Mettre √† jour la r√©ponse pour indiquer que la notification a √©t√© envoy√©e
      await db.collection("reviewResponses").doc(responseData.id).update({
        notificationSent: true,
        notificationSentDate: new Date()
      });
    } catch (updateError) {
      console.error("‚ùå Erreur lors de la mise √† jour de la r√©ponse:", updateError);
      // On continue m√™me si l'update √©choue
    }
    
    console.log("‚úÖ Notification de r√©ponse √† l'avis envoy√©e");
    return { success: true };
  } catch (error) {
    console.error("‚ùå Erreur lors de l'envoi de la notification de r√©ponse:", error);
    return { success: false, error: error.message };
  }
}

/**
 * Envoie une notification par email lorsqu'un utilisateur modifie son avis
 * @param {Object} reviewData - Les nouvelles donn√©es de l'avis
 * @param {Object} previousReview - Les donn√©es pr√©c√©dentes de l'avis
 */
async function sendReviewUpdateNotification(reviewData, previousReview) {
  try {
    console.log("üìß Envoi de notification de modification d'avis");
    
    // V√©rifier que l'avis existe
    if (!reviewData || !previousReview) {
      console.error("‚ùå Donn√©es manquantes: avis actuel ou pr√©c√©dent");
      return { success: false, error: "Donn√©es d'avis manquantes" };
    }
    
    // R√©cup√©rer les donn√©es de l'utilisateur
    const userDoc = await db.collection("users").doc(reviewData.userId).get();
    if (!userDoc.exists) {
      console.error(`‚ùå Utilisateur ${reviewData.userId} non trouv√©`);
      return { success: false, error: "Utilisateur non trouv√©" };
    }
    
    const userData = userDoc.data();
    
    // G√©n√©rer le contenu de l'email
    const emailContent = generateReviewUpdateEmail(reviewData, userData, previousReview);
    
    // Envoyer l'email √† l'administrateur
    const adminResult = await emailService.sendEmail(
      process.env.EMAIL_USER, // Adresse admin
      emailContent.subject,
      emailContent.html
    );
    
    if (!adminResult.success) {
      console.error("‚ùå Erreur lors de l'envoi de l'email √† l'administrateur:", adminResult.error);
    }
    
    // Envoyer √©galement un email de confirmation √† l'utilisateur
    const userEmailContent = {
        subject: "Votre avis a bien √©t√© modifi√© - GameCash",
        html: `
        <!DOCTYPE html>
        <html>
        <head>
          <meta charset="utf-8">
          <title>Avis modifi√© - GameCash</title>
          <style>
            body {
              font-family: 'Roboto', 'Segoe UI', sans-serif;
              line-height: 1.6;
              color: #333;
              background-color: #f8f9fa;
              margin: 0;
              padding: 0;
            }
            .container {
              max-width: 600px;
              margin: 0 auto;
              padding: 20px;
              background-color: #ffffff;
            }
            .header {
              text-align: center;
              padding: 20px 0;
              border-bottom: 4px solid #6200ea;
            }
            h1 {
              color: #6200ea;
              margin: 20px 0;
            }
            .review-info {
              background-color: #f0f0ff;
              padding: 15px;
              border-radius: 5px;
              margin: 20px 0;
              border-left: 4px solid #6200ea;
            }
            .rating {
              color: #FFD700;
              font-size: 20px;
            }
            .footer {
              text-align: center;
              padding: 20px 0;
              font-size: 0.9em;
              color: #777;
              border-top: 1px solid #eee;
            }
          </style>
        </head>
        <body>
          <div class="container">
            <div class="header">
              <h1>Votre avis a bien √©t√© modifi√©</h1>
            </div>
            
            <p>Bonjour ${userData.displayName || 'Cher client'},</p>
            
            <p>Nous confirmons que votre avis a bien √©t√© mis √† jour.</p>
            
            <div class="review-info">
              <h2>Votre nouvel avis</h2>
              <p><strong>Note :</strong> <span class="rating">${'‚òÖ'.repeat(Math.floor(reviewData.rating))}${reviewData.rating % 1 >= 0.5 ? '¬Ω' : ''}${'‚òÜ'.repeat(5 - Math.ceil(reviewData.rating))}</span> (${reviewData.rating}/5)</p>
              <p><strong>Date de modification :</strong> ${new Date().toLocaleDateString('fr-FR')}</p>
              ${reviewData.title ? `<p><strong>Titre :</strong> ${reviewData.title}</p>` : ''}
              <p><strong>Commentaire :</strong></p>
              <p style="background-color: #fff; padding: 10px; border-radius: 5px; border-left: 3px solid #6200ea;">${reviewData.comment}</p>
            </div>
            
            <p>Merci pour votre contribution !</p>
            
            <div class="footer">
              <p>¬© ${new Date().getFullYear()} GameCash - Tous droits r√©serv√©s</p>
              <p>Ce message a √©t√© envoy√© automatiquement par le syst√®me de notification de GameCash.</p>
            </div>
          </div>
        </body>
        </html>
        `
      };
      
      const userResult = await emailService.sendEmail(
        userData.email,
        userEmailContent.subject,
        userEmailContent.html
      );
      
      if (!userResult.success) {
        console.error("‚ùå Erreur lors de l'envoi de l'email √† l'utilisateur:", userResult.error);
      }
      
      try {
        // Mettre √† jour l'avis pour indiquer que la notification a √©t√© envoy√©e
        await db.collection("reviews").doc(reviewData.id).update({
          updateNotificationSent: true,
          updateNotificationSentDate: new Date()
        });
      } catch (updateError) {
        console.error("‚ùå Erreur lors de la mise √† jour de l'avis:", updateError);
        // On continue m√™me si l'update √©choue
      }
      
      console.log("‚úÖ Notifications de modification d'avis envoy√©es");
      return { success: true };
    } catch (error) {
      console.error("‚ùå Erreur lors de l'envoi des notifications de modification:", error);
      return { success: false, error: error.message };
    }
  }

  // Ajoutez cette fonction pour g√©rer les r√©ponses admin
async function sendReviewResponseNotification(reviewData, responseData, userData = null) {
    try {
      console.log("üìß Envoi de notification de r√©ponse √† un avis");
      
      // V√©rifier que l'avis et la r√©ponse existent
      if (!reviewData || !responseData) {
        console.error("‚ùå Donn√©es manquantes: avis ou r√©ponse");
        return { success: false, error: "Donn√©es d'avis ou de r√©ponse manquantes" };
      }
      
      // Si userData n'est pas fourni, r√©cup√©rer l'utilisateur √† partir de reviewData
      if (!userData && reviewData.userId) {
        const userDoc = await db.collection("users").doc(reviewData.userId).get();
        if (userDoc.exists) {
          userData = userDoc.data();
        } else {
          console.error(`‚ùå Utilisateur ${reviewData.userId} non trouv√©`);
          return { success: false, error: "Utilisateur non trouv√©" };
        }
      }
      
      if (!userData) {
        console.error("‚ùå Donn√©es utilisateur manquantes");
        return { success: false, error: "Donn√©es utilisateur manquantes" };
      }
      
      // G√©n√©rer le contenu de l'email (adapt√© pour les r√©ponses admin)
      const emailContent = generateReviewResponseEmail(reviewData, responseData, userData);
      
      // Envoyer l'email √† l'utilisateur
      const userResult = await emailService.sendEmail(
        userData.email,
        emailContent.subject,
        emailContent.html
      );
      
      if (!userResult.success) {
        console.error("‚ùå Erreur lors de l'envoi de l'email √† l'utilisateur:", userResult.error);
        return { success: false, error: userResult.error };
      }
      
      console.log("‚úÖ Notification de r√©ponse √† l'avis envoy√©e");
      return { success: true };
    } catch (error) {
      console.error("‚ùå Erreur lors de l'envoi de la notification de r√©ponse:", error);
      return { success: false, error: error.message };
    }
  }
  
  module.exports = {
    sendNewReviewNotification,
    sendReviewResponseNotification,
    sendReviewUpdateNotification
  };